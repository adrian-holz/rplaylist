name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Can we build and are we error-free?
  build-and-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Alsa Dependencies
        run: sudo apt-get -y install libasound2-dev
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run Clippy
        env:
          # Make sure CI fails on all warnings, including Clippy lints
          RUSTFLAGS: "-Dwarnings"
        run: cargo clippy --all-targets --all-features
      - name: Formatting
        run: cargo fmt --all -- --check

  build-linux:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-check

    steps:
      - uses: actions/checkout@v3
      - name: Alsa Dependencies
        run: sudo apt-get -y install libasound2-dev

      - name: Build
        run: cargo build --all --release
      - run: mv target/release/rplaylist target/release/rplaylist_linux_amd64

      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: rplaylist_linux_amd64
          path: target/release/rplaylist_linux_amd64

  build-win:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-check

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: cargo build --all --release

      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: rplaylist_win
          path: target/release/rplaylist.exe

  build-mac:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-check

    steps:
      - uses: actions/checkout@v3

      - name: Build for macOs
        run: cargo build --all --release
      - run: mv target/release/rplaylist target/release/rplaylist_darwin

      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: rplaylist_darwin
          path: target/release/rplaylist_darwin

  upload:
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-win
      - build-mac

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $GITHUB_REF_NAME \
              'rplaylist_linux_amd64/rplaylist_linux_amd64#rplaylist_linux_amd64' \
              'rplaylist_win/rplaylist.exe#rplaylist.exe' \
              'rplaylist_darwin/rplaylist_darwin#rplaylist_darwin' \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${GITHUB_REF_NAME}" \
              --generate-notes
